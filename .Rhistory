mutate_at(vars("Azucar"), as.factor) %>% #Selects a coloumn and defines them as factor
select(Azucar, disolucion)
boxPlotComparative <- function(data, x, y, label_column = TRUE) {
if (!(x %in% colnames(data))) stop(paste("Column", x, "not found in dataset"))
if (!(y %in% colnames(data))) stop(paste("Column", y, "not found in dataset"))
# Handling labels
if (isTRUE(label_column)) {
if (!is.null(rownames(data))) {
data$.rownames <- rownames(data)  # Create a new column for row names
label_column <- ".rownames"  # Use this column as labels
} else {
label_column <- FALSE  # No labels if row names don't exist
}
} else if (is.character(label_column) && !(label_column %in% colnames(data))) {
stop(paste("Label column", label_column, "not found in dataset"))
}
# Calculate outliers
outlier_data <- data %>%
group_by(.data[[x]]) %>%
mutate(
Q1 = quantile(.data[[y]], 0.25),
Q3 = quantile(.data[[y]], 0.75),
IQR = Q3 - Q1,
lower_bound = Q1 - 1.5 * IQR,
upper_bound = Q3 + 1.5 * IQR,
is_outlier = (.data[[y]] < lower_bound | .data[[y]] > upper_bound)
) %>%
filter(is_outlier)
# Create the base boxplot
plot <- ggplot(data, aes(x = .data[[x]], y = .data[[y]])) +
geom_boxplot() +
labs(
title = paste("Box Plot para ", x, " Chucaradas vs", y, " Segundos"),
x = x,
y = y
) +
theme_minimal()
# Add outlier labels if applicable
if (!isFALSE(label_column) && nrow(outlier_data) > 0) {
plot <- plot +
geom_text(data = outlier_data, aes(label = .data[[label_column]]),
position = position_jitter(width = 0.2, height = 0),
size = 4, color = "red", hjust = -0.3)
}
return(plot)
}
boxPlotComparative(randExperiment, x = "Azucar", y = "disolucion")
modelAnova <- aov(disolucion ~ Azucar, data = randExperiment)
summary(modelAnova)
multipleComparisonTest <- LSD.test(modelAnova,"Azucar")
multipleComparisonTest
histogram_normal_residuals <- function(model, binwidth = 0.5, bins = 5) {
residuals_df <- tidyr::tibble(
Standardized_Residuals = rstandard(model)
)
ggplot2::ggplot(residuals_df, aes(x = Standardized_Residuals)) +
ggplot2::geom_histogram(aes(y = after_stat(density)),binwidth = binwidth, bins = bins, fill = "blue", alpha = 0.2, color = "black") +
ggplot2::stat_function(fun = dnorm, args = list(mean = 0, sd = 1),
color = "red", linetype = "dashed", size = 1) +
ggplot2::labs(
title = "Histograma de Residuos Estadarizados con bondad a la Normal",
x = "Residuos Estadarizados",
y = "Densidad"
) +
ggplot2::theme_minimal()
}
histogram_normal_residuals(modelAnova)
qqplot_normal_residual <- function(model, label_column = FALSE) {
residuals_df <- tidyr::tibble(
Standardized_Residuals = rstandard(model)
)
qq_data <- qqnorm(residuals_df$Standardized_Residuals, plot.it = FALSE)
residuals_df <- dplyr::mutate(residuals_df,
Theoretical_Quantiles = qq_data$x,
Sample_Quantiles = qq_data$y)
# If label_column is FALSE, use row names if available
if (isFALSE(label_column)) {
if (!is.null(rownames(residuals_df))) {
residuals_df$.rownames <- rownames(residuals_df)  # Create a new column for row names
label_column <- ".rownames"  # Use this column as labels
} else {
label_column <- FALSE  # No labels if row names don't exist
}
}
plot <- ggplot2::ggplot(residuals_df, ggplot2::aes(x = Theoretical_Quantiles, y = Sample_Quantiles)) +
ggplot2::geom_point(color = "blue") +  # Q-Q points
ggplot2::geom_abline(slope = 1, intercept = 0, color = "red", linetype = "dashed") +  # Q-Q reference line
ggplot2::labs(
title = "Q-Q Residuos Estandarizados",
x = "Quantiles Teóricos",
y = "Quantiles de la Muestra"
) +
ggplot2::theme_minimal()
# Add labels if specified
if (!isFALSE(label_column)) {
plot <- plot + ggplot2::geom_text(aes(label = ifelse(abs(Standardized_Residuals) > 2, .data[[label_column]], "")),
hjust = -0.3, vjust = 0.5, size = 4, color = "black")
}
return(plot)
}
qqplot_normal_residual(modelAnova, label_column = FALSE)
shapiroTest <- function(updatedModel, alpha = 0.05) {
result <- stats::shapiro.test(updatedModel$residuals)
p_value <- result$p.value
print(result)
if (p_value < alpha) {
cat("Hay evidencia para rechazar la hipótesis nula con un nivel de significancia:", alpha,
"\nPor ende, los residuos no son normalmente distribuidos.\n")
} else {
cat("No hay evidencia para rechazar la hipótesis nula con un nivel de significancia:", alpha,
"\nPor ende, los residuos son normalmente distribuidos. \n")
}
#example
#shapiroTest(model, alpha = 0.05)
#the predefined alpha is 0.05 but you can change it
}
shapiroTest(modelAnova)
Eepsilon <- function(updatedModel,categorical = TRUE, alpha = 0.05, message = TRUE) {
promedio <- mean(updatedModel$residuals)
if (!categorical) {
sigma <- sqrt(sum(residuals(updatedModel)^2) / df.residual(updatedModel))
} else {
# Manually calculate sigma (residual standard deviation)
sigma <- summary(updatedModel)$sigma
}
n <- length(updatedModel$residuals)
SE <- sigma / sqrt(n)
z_alpha <- qnorm(1 - alpha / 2)
CIupper <- promedio + z_alpha * SE
CIlower <- promedio - z_alpha * SE
cat("Confidence Interval:", "[", CIlower, ",", CIupper, "]\n")
if (message) { # Only print if message is TRUE
if (CIupper < 0 || CIlower > 0) {
cat("There is sufficient evidence to reject the null hypothesis (p <", alpha, ")\n")
cat("The expected value of the residuals is likely different from 0.\n")
} else {
cat("There is not sufficient evidence to reject the null hypothesis (p >=", alpha, ")\n")
cat("The expected value of the residuals could be 0.\n")
}
} # End of the if (message) block
}
Eepsilon(modelAnova, categorical = FALSE, message = FALSE)
homoscedasticity_plot <- function(model, label_column = FALSE) {
residuals_df <- data.frame(
Fitted = fitted(model),
Standardized_Residuals = rstandard(model)
)
# If label_column is FALSE, use row names if available
if (isFALSE(label_column)) {
if (!is.null(rownames(residuals_df))) {
residuals_df$.rownames <- rownames(residuals_df)  # Create a new column for row names
label_column <- ".rownames"  # Use this column as labels
} else {
label_column <- FALSE  # No labels if row names don't exist
}
}
plot <- ggplot2::ggplot(residuals_df, aes(x = Fitted, y = Standardized_Residuals)) +
ggplot2::geom_point(color = "blue", alpha = 0.6) +
ggplot2::geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
ggplot2::labs(
title = "Residuos Standarizados contra Valores Ajustados",
x = "Valores Ajustados",
y = "Residuos Standarizados"
) +
ggplot2::theme_minimal()
if (!isFALSE(label_column)) {
plot <- plot + ggplot2::geom_text(aes(label = ifelse(abs(Standardized_Residuals) > 2, .data[[label_column]], "")),
hjust = -0.3, vjust = 0.5, size = 4, color = "black")
}
return(plot)
}
homoscedasticity_plot(modelAnova)
BreushPaga <- function(updatedModel, alpha = 0.05) {
result <- lmtest::bptest(updatedModel)
p_value <- result$p.value
print(result)
if (p_value < alpha) {
cat("Hay evidencia para rechazar la hipótesis nula con un nivel de significancia:", alpha,
"\n Por ende los residuos tienen heteroscedasticidad. \n")
} else {
cat("No hay evidencia para rechazar la hipótesis nula con un nivel de significancia:", alpha,
"\n Por ende los residuos tienen homoscedasticity.\n")
}
#Example
#BreushPaga(model, alpha = 0.05)
}
BreushPaga(modelAnova)
DurbinWatson <- function(updatedModel, alpha = 0.05) {
result <- car::durbinWatsonTest(updatedModel)
p_value <- result$p
print(result)
if (p_value < alpha) {
cat("Hay evidencia para rechazar la hipótesis nula con un nivel de significancia:", alpha,
"\n Por ende los residuos son dependientes.\n")
} else {
cat("No hay evidencia para rechazar la hipótesis nula con un nivel de significancia:", alpha,
"\n Por ende los residuos son independientes.\n")
}
#Example
#DurbinWatson(model, alpha)
}
DurbinWatson(modelAnova)
modelAnovaTested <- aov(disolucion ~ Azucar, data = testedSample)
testedSample <- randExperiment %>%
filter(!(disolucion == "55.12"))
boxPlotComparative(testedSample, x = "Azucar", y = "disolucion")
modelAnovaTested <- aov(disolucion ~ Azucar, data = testedSample)
summary(modelAnovaTested)
shapiroTest(modelAnovaTested)
set.seed(123)
randExperiment <- df %>%
slice_sample(n = 20) %>%#sample 10 rows.
print(randExperiment)
knitr::opts_chunk$set(echo = TRUE)
source("/home/adrianarimany/Documents/UVG/Year_2/Stats_2/functions_linearRegression.R")
source("/home/adrianarimany/Documents/UVG/Year_2/Stats_2/functions_general.R")
source("/home/adrianarimany/Documents/UVG/Year_2/Stats_2/functions_graphs.R")
library(ggplot2)
library(dplyr)
library(agricolae)
library(psych)
listExcelSheets("RCBD.xlsx")
df <- excelPath("RCBD.xlsx", removeSpace = FALSE, sheet = NULL)
head(df)
listExcelSheets("RCBD.xlsx")
df <- excelPath("RCBD.xlsx", removeSpace = FALSE, sheet = NULL)
head(df)
max(df$Resistencia)
mix(df$Resistencia)
min(df$Resistencia)
mean(df$Resistencia)
listExcelSheets("RCBD.xlsx")
df <- excelPath("RCBD.xlsx", removeSpace = FALSE, sheet = NULL)
head(df)
#Define the data as factors, given that block is another categorical variable both block and Factor should be converted to as.factor
df <- df %>%
as.factor(Factor) %>%
as.factor(Bloque)
#Define the data as factors, given that block is another categorical variable both block and Factor should be converted to as.factor
df <- df %>%
mutate_at(vars("Bloque","Factor"), as.factor)
ANOVAMODEL <- aov(Resistencia ~ Factor + Bloque, data = df)
ANOVAMODEL
summary(ANOVAMODEL)
RCBD_turkey <- TukeyHSD(ANOVAMODEL, "Factor")
RCBD_turkey
summary(RCBD_turkey)
RCBD_turkey
knitr::opts_chunk$set(echo = FALSE) ##hides all chunks by predetermination
library(ggplot2)
library(dplyr)
library(agricolae)
BreushPaga <- function(updatedModel, alpha = 0.05) {
result <- lmtest::bptest(updatedModel)
p_value <- result$p.value
print(result)
if (p_value < alpha) {
cat("Hay evidencia para rechazar la hipótesis nula con un nivel de significancia:", alpha,
"\n Por ende los residuos tienen heteroscedasticidad. \n")
} else {
cat("No hay evidencia para rechazar la hipótesis nula con un nivel de significancia:", alpha,
"\n Por ende los residuos tienen homoscedasticity.\n")
}
#Example
#BreushPaga(model, alpha = 0.05)
}
BreushPaga(modelAnova)
library(poibin)
library(ggplot2)
win_probs <- c(4/5, 13/20, 3/10)
source("~/Documents/UVG/Year_3/Probability_Theory/Labs/Homework/tarea_1_probability.R", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
source("/home/adrianarimany/Documents/UVG/Year_2/Stats_2/functions_linearRegression.R")
source("/home/adrianarimany/Documents/UVG/Year_2/Stats_2/functions_general.R")
source("/home/adrianarimany/Documents/UVG/Year_2/Stats_2/functions_graphs.R")
library(ggplot2)
library(dplyr)
library(agricolae)
library(psych)
RCBD_turkey <- TukeyHSD(ANOVAMODEL, "Factor")
RCBD_turkey
ANOVAMODEL$residuals
library(moments)
install.packages("moments")
library(moments)
library(agricolae)
library(sage)
library(e1071)
# Using agricolea
skewness(ANOVAMODEL$residuals)
kurtosis(ANOVAMODEL$residuals)
# Using agricolea
agricolea::skewness(ANOVAMODEL$residuals)
agricolae::kurtosis(ANOVAMODEL$residuals)
# Using agricolae
agricolae::skewness(ANOVAMODEL$residuals)
#Using moments
moments::kurtosis(ANOVAMODEL$residuals)
#Using moments
moments::skewness(ANOVAMODEL$residuals)
moments::kurtosis(ANOVAMODEL$residuals)
#Using moments
moments::skewness(ANOVAMODEL$residuals)
moments::kurtosis(ANOVAMODEL$residuals)
moments::kurtosis(ANOVAMODEL$residuals) +3
moments::kurtosis(ANOVAMODEL$residuals)
# Call the function to produce the diagnostic plots
plot_diagnostics(ANOVAMODEL)
plot_homoskedacity_Independence <- function(model) {
# Set up the plotting area to display two plots side-by-side
par(mfrow = c(1, 2))
# Residuals vs Fitted Plot: Assess independence and linearity
plot(model, which = 1, main = "Residuals vs Fitted")
# Scale-Location Plot: Assess homoskedasticity (constant variance)
plot(model, which = 3, main = "Scale-Location")
# Reset plotting area to default (1 plot per page)
par(mfrow = c(1, 1))
}
# Call the function to produce the diagnostic plots
plot_diagnostics(ANOVAMODEL)
# Call the function to produce the diagnostic plots
plot_homoskedacity_Independence(ANOVAMODEL)
# Example usage:
# Suppose your ANOVA model is:
# model <- aov(response ~ treatment + block, data = mydata)
# and your block variable is named "block":
plot_residuals_vs_block(ANOVAMODEL, "Bloque")
plot_residuals_vs_block <- function(model, block_var) {
# Check if the block variable exists in the model data
if (!block_var %in% names(model$model)) {
stop(paste("Block variable", block_var, "not found in the model data."))
}
# Create a data frame from the model's data and add residuals
df <- model$model
df$residuals <- residuals(model)
# Generate the ggplot: a boxplot with jittered points
p <- ggplot(df, aes_string(x = block_var, y = "residuals")) +
geom_boxplot(fill = "lightblue", outlier.colour = NA) +
geom_jitter(width = 0.2, alpha = 0.5, color = "red") +
labs(title = "Residuals vs Block",
x = block_var,
y = "Residuals") +
theme_minimal()
return(p)
}
# Example usage:
# Suppose your ANOVA model is:
# model <- aov(response ~ treatment + block, data = mydata)
# and your block variable is named "block":
plot_residuals_vs_block(ANOVAMODEL, "Bloque")
plot_residuals_vs_block <- function(model, block_var) {
# Check if the block variable exists in the model data
if (!block_var %in% names(model$model)) {
stop(paste("Block variable", block_var, "not found in the model data."))
}
# Create a data frame from the model's data and add residuals
df <- model$model
df$residuals <- residuals(model)
p <- ggplot(df, aes(x = .data[[block_var]], y = residuals)) +
geom_boxplot(fill = "lightblue", outlier.colour = NA) +
geom_jitter(width = 0.2, alpha = 0.5, color = "red") +
labs(title = "Residuals vs Block",
x = block_var,
y = "Residuals") +
theme_minimal()
return(p)
}
# Example usage:
# Suppose your ANOVA model is:
# model <- aov(response ~ treatment + block, data = mydata)
# and your block variable is named "block":
plot_residuals_vs_block(ANOVAMODEL, "Bloque")
leveneTest(Resistencia ~Bloque, data = df)
library(car)
leveneTest(Resistencia ~Bloque, data = df)
leveneTest("Resistencia" ~ "Bloque", data = df)
leveneTest(df$Resistencia ~ df$Bloque, data = df)
#Define the data as factors, given that block is another categorical variable both block and Factor should be converted to as.factor
df <- df %>%
mutate_at(vars("Bloque","Factor"), as.factor)
knitr::opts_chunk$set(echo = TRUE)
source("/home/adrianarimany/Documents/UVG/Year_2/Stats_2/functions_linearRegression.R")
source("/home/adrianarimany/Documents/UVG/Year_2/Stats_2/functions_general.R")
source("/home/adrianarimany/Documents/UVG/Year_2/Stats_2/functions_graphs.R")
library(ggplot2)
library(dplyr)
library(agricolae)
library(psych)
listExcelSheets("RCBD.xlsx")
df <- excelPath("RCBD.xlsx", removeSpace = FALSE, sheet = NULL)
head(df)
#Define the data as factors, given that block is another categorical variable both block and Factor should be converted to as.factor
df <- df %>%
mutate_at(vars("Bloque","Factor"), as.factor)
ANOVAMODEL <- aov(Resistencia ~ Factor + Bloque, data = df)
ANOVAMODEL
summary(ANOVAMODEL)
RCBD_turkey <- TukeyHSD(ANOVAMODEL, "Factor")
RCBD_turkey
# Using agricolae
agricolae::skewness(ANOVAMODEL$residuals)
agricolae::kurtosis(ANOVAMODEL$residuals)
#Using moments
moments::skewness(ANOVAMODEL$residuals)
moments::kurtosis(ANOVAMODEL$residuals)
plot_residuals_vs_block <- function(model, block_var) {
# Check if the block variable exists in the model data
if (!block_var %in% names(model$model)) {
stop(paste("Block variable", block_var, "not found in the model data."))
}
# Create a data frame from the model's data and add residuals
df <- model$model
df$residuals <- residuals(model)
p <- ggplot(df, aes(x = .data[[block_var]], y = residuals)) +
geom_boxplot(fill = "lightblue", outlier.colour = NA) +
geom_jitter(width = 0.2, alpha = 0.5, color = "red") +
labs(title = "Residuals vs Block",
x = block_var,
y = "Residuals") +
theme_minimal()
return(p)
}
# Example usage:
# Suppose your ANOVA model is:
# model <- aov(response ~ treatment + block, data = mydata)
# and your block variable is named "block":
plot_residuals_vs_block(ANOVAMODEL, "Bloque")
library(car)
leveneTest(df$Resistencia ~ df$, data = df)
leveneTest(df$Resistencia ~ df$Factor, data = df)
leveneTest(aov(df$Resistencia ~ df$Factor), data = df)
result <- excelPath(path = "Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
result <- excelPath(path = "Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
getwd()  # Prints the current working directory
library(myPackage)
result <- excelPath(path = "Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
result <- excelPath(path = "Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
result <- excelPath(path = "/home/adrianarimany/Documents/UVG/Year_2/Physics_2/Labs_Assigments/Assigment_4_C254/Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
head(result)
library(myPackage)
result <- excelPath(path = "/home/adrianarimany/Documents/UVG/Year_2/Physics_2/Labs_Assigments/Assigment_4_C254/Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
head(result)
library(myPackage)
result <- excelPath(path = "/home/adrianarimany/Documents/UVG/Year_2/Physics_2/Labs_Assigments/Assigment_4_C254/Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
result <- excelPath(path = "/home/adrianarimany/Documents/UVG/Year_2/Physics_2/Labs_Assigments/Assigment_4_C254/Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
library(myPackage)
result <- excelPath(path = "/home/adrianarimany/Documents/UVG/Year_2/Physics_2/Labs_Assigments/Assigment_4_C254/Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
library(myPackage)
result <- excelPath(path = "/home/adrianarimany/Documents/UVG/Year_2/Physics_2/Labs_Assigments/Assigment_4_C254/Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
excelPath
result <- excelPath(path = "/home/adrianarimany/Documents/UVG/Year_2/Physics_2/Labs_Assigments/Assigment_4_C254/Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
getwd()  # Prints the current working directory
getwd(/home/adrianarimany/myPackage)
result <- excelPath(path = "Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
result <- excelPath(path = "Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
library(myPackage)
result <- excelPath(path = "Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
result <- excelPath(path = "Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
head(result)
result <- excelPath(path = "Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
library(myPackage)
result <- excelPath(path = "Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
result <- excelPath(path = "/home/adrianarimany/Documents/UVG/Year_2/Physics_2/Labs_Assigments/Assigment_4_C254", removeSpace = TRUE)
result <- excelPath(path = "/home/adrianarimany/Documents/UVG/Year_2/Physics_2/Labs_Assigments/Assigment_4_C254/Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
head(result)
library(myPackage)
result <- excelPath(path = "/home/adrianarimany/Documents/UVG/Year_2/Physics_2/Labs_Assigments/Assigment_4_C254/Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
head(result)
library(myPackage)
result <- excelPath(path = "/home/adrianarimany/Documents/UVG/Year_2/Physics_2/Labs_Assigments/Assigment_4_C254/Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
library(myPackage)  # Reloads the package
result <- excelPath(path = "/home/adrianarimany/Documents/UVG/Year_2/Physics_2/Labs_Assigments/Assigment_4_C254/Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
devtools::install("/home/adrianarimany/myPackage")
result <- excelPath(path = "/home/adrianarimany/Documents/UVG/Year_2/Physics_2/Labs_Assigments/Assigment_4_C254/Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
devtools::install("/home/adrianarimany/myPackage")
result <- excelPath(path = "/home/adrianarimany/Documents/UVG/Year_2/Physics_2/Labs_Assigments/Assigment_4_C254/Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
library(myPackage)
result <- excelPath(path = "/home/adrianarimany/Documents/UVG/Year_2/Physics_2/Labs_Assigments/Assigment_4_C254/Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
devtools::install("/home/adrianarimany/myPackage")
result <- excelPath(path = "/home/adrianarimany/Documents/UVG/Year_2/Physics_2/Labs_Assigments/Assigment_4_C254/Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
devtools::install_github("adrianArimany/mypackageR")
devtools::install_github("adrianArimany/mypackageR")
library(myPackage)
result <- excelPath(path = "/home/adrianarimany/Documents/UVG/Year_2/Physics_2/Labs_Assigments/Assigment_4_C254/Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
result <- myPackage::excelPath(path = "/home/adrianarimany/Documents/UVG/Year_2/Physics_2/Labs_Assigments/Assigment_4_C254/Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
library(myPackage)
result <- excelPath(path = "/home/adrianarimany/Documents/UVG/Year_2/Physics_2/Labs_Assigments/Assigment_4_C254/Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
result <- excelPath(path = "Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
head(result)
result <- excelPath(path = "Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
result <- excelPath(path = "Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
listExcelSheets("Lab_4_fisica_2_results.xlsx")
library(myPackage)
result <- excelPath(path = "Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
result <- excelPath(path = "Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
listExcelSheets("Lab_4_fisica_2_results.xlsx")
devtools::install_github("adrianArimany/mypackageR", force = TRUE)
library(myPackageR)
devtools::install_github("adrianArimany/mypackageR", force = TRUE)
devtools::install_github("adrianArimany/mypackageR", force = TRUE)
result <- excelPath(path = "Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
listExcelSheets("Lab_4_fisica_2_results.xlsx")
devtools::document()
devtools::document()
setwd("/home/adrianarimany/myPackageR")
devtools::as.package(".")
devtools::document()
devtools::install()
devtools::install_github("adrianArimany/mypackageR", force = TRUE)
result <- excelPath(path = "Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
result <- excelPath(path = "Lab_4_fisica_2_results.xlsx", removeSpace = TRUE)
1
